syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "helloworld/helloworld.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user/user.proto";
import "common/common.proto";
option go_package = "github.com/NEKETSKY/mnemosyne/pkg/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Mnemosyne App API"
    description: "API Server for Mnemosyne application"
    version: "1.0"
    contact: {
      name: "Bar"
    }
  }
  host: "localhost:8000"
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "403"
    value: {
      description: "Returned when the user does not have permission to access the resource."
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: {
        json_schema: {
          type: STRING
        }
      }
    }
  }
  security_definitions: {
    security: {
      key: "BasicAuth"
      value: {
        type: TYPE_BASIC
      }
    }
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-API-Key"
        extensions: {
          key: "x-amazon-apigateway-authtype"
          value {
            string_value: "oauth2"
          }
        }
        extensions: {
          key: "x-amazon-apigateway-authorizer"
          value {
            struct_value {
              fields {
                key: "type"
                value {
                  string_value: "token"
                }
              }
              fields {
                key: "authorizerResultTtlInSeconds"
                value {
                  number_value: 60
                }
              }
            }
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "BasicAuth"
      value: {}
    }
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
};

// The greeting service definition.
service Mnemosyne {
  // Sends a greeting
  rpc SayHello (helloworld.HelloRequest) returns (helloworld.HelloReply) {
    option (google.api.http) = {
      post: "/mnemosyne"
      body: "*"
    };
  }

  //Create new user
  rpc CreateUser (user.User) returns (user.Email){
    option (google.api.http) = {
      post: "/user/new"
      body: "*"
    };
  };
  
  //Get all existing users 
  rpc GetAllUsers (common.Empty) returns (user.Users){
    option (google.api.http) = {
      get: "/user/all"
    };
  };

  //Get user by email
  rpc GetUser (user.Email) returns (user.User){
    option (google.api.http) = {
      get: "/user/{email}"     
    };
  };

  //Update user's data
  rpc UpdateUser (user.User) returns (user.Email){
    option (google.api.http) = {
      post: "/user/update"
      body: "*"
    };
  };

  //Delete user by email
  rpc DeleteUser (user.Email) returns (common.Empty){
    option (google.api.http) = {
      delete: "/user/{email}"
    };
  }; 
}

