syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "helloworld/helloworld.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user/user.proto";
import "interview/interview.proto";
import "team/team.proto";
import "certificate/certificate.proto";
import "group/group.proto";
import "common/common.proto";
option go_package = "github.com/NEKETSKY/mnemosyne/pkg/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Mnemosyne App API"
    description: "API Server for Mnemosyne application"
    version: "1.0"
    contact: {
      name: "Bar"
    }
  }
  host: "localhost:8000"
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "403"
    value: {
      description: "Returned when the user does not have permission to access the resource."
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: {
        json_schema: {
          type: STRING
        }
      }
    }
  }
  security_definitions: {
    security: {
      key: "BasicAuth"
      value: {
        type: TYPE_BASIC
      }
    }
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-API-Key"
        extensions: {
          key: "x-amazon-apigateway-authtype"
          value {
            string_value: "oauth2"
          }
        }
        extensions: {
          key: "x-amazon-apigateway-authorizer"
          value {
            struct_value {
              fields {
                key: "type"
                value {
                  string_value: "token"
                }
              }
              fields {
                key: "authorizerResultTtlInSeconds"
                value {
                  number_value: 60
                }
              }
            }
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "BasicAuth"
      value: {}
    }
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
};

// The greeting service definition.
service Mnemosyne {
  // Sends a greeting
  rpc SayHello (helloworld.HelloRequest) returns (helloworld.HelloReply) {
    option (google.api.http) = {
      post: "/mnemosyne"
      body: "*"
    };
  };

  //Create new user
  rpc CreateUser (user.User) returns (user.Id){
    option (google.api.http) = {
      post: "/user"
      body: "*"
    };
  };

  //Get all existing users
  rpc GetUsers (user.UserRequest) returns (user.Users){
    option (google.api.http) = {
      get: "/user"
    };
  };

  //Get user by id
  rpc GetUserById (user.Id) returns (user.User){
    option (google.api.http) = {
      get: "/user/{id}"
    };
  };

 //Get user by email
  rpc GetUserByEmail (user.Email) returns (user.User){
    option (google.api.http) = {
      get: "/user/{email}"     
    };
  };

  //Update user's data
  rpc UpdateUser (user.User) returns (common.Empty){
    option (google.api.http) = {
      put: "/user"
      body: "*"
    };
  };

  //Delete user by id
  rpc DeactivateUser (user.Id) returns (common.Empty){
    option (google.api.http) = {
      delete: "/user/{id}"
    };
  };

  //Activate user by id
  rpc ActivateUser (user.Id) returns (common.Empty){
    option (google.api.http) = {
      put: "/user/{id}/activate"
      body: "*"
    };
  };

  //Get contact by ID
  rpc GetContact (user.Id) returns (user.Contact){
    option (google.api.http) = {
      get: "/contact/{id}"
    };
  };

  //Update contact's data
  rpc UpdateContact (user.Contact) returns (common.Empty){
    option (google.api.http) = {
      put: "/contact/{id}"
    };
  };
  //Get resume by ID
  rpc GetResume (user.Id) returns (user.Resume){
    option (google.api.http) = {
      get: "/resume/{id}"
    };
  };

  //Update resume data
  rpc UpdateResume (user.Resume) returns (common.Empty){
    option (google.api.http) = {
      put: "/resume/{id}"
    };
  };

   //Delete contacts by ID
   rpc DeleteContact (user.Id) returns (common.Empty){
    option (google.api.http) = {
      delete: "/contact/{id}"
    };
  };
  //Delete resume by ID
  rpc DeleteResume (user.Id) returns (common.Empty){
    option (google.api.http) = {
      delete: "/resume/{id}"
    };
  };

  //  INTERVIEW
  //Create new interview
  rpc CreateInterview (interview.InterviewRequest) returns (interview.InterviewResponse){
    option (google.api.http) = {
      post: "/interview"
      body: "*"
    };
  };
  //Get all existing interviews
  rpc GetInterviews (interview.InterviewList) returns (interview.Interviews){
    option (google.api.http) = {
      get: "/interview"
    };
  };
  //Get interview by id
  rpc GetInterview (interview.Id) returns (interview.InterviewResponse){
    option (google.api.http) = {
      get: "/interview/{id}"
    };
  };
  //Update interview data
  rpc UpdateInterview (interview.InterviewRequest) returns (interview.InterviewResponse){
    option (google.api.http) = {
      put: "/interview/{id}"

      body: "*"
    };
  };
  //Deactivate interview by id
  rpc DeactivateInterview (interview.Id) returns (interview.InterviewResponse){
    option (google.api.http) = {
      put: "/interview/{id}/deactivate"
    };
  };
  //Activate interview by id
  rpc ActivateInterview (interview.Id) returns (interview.InterviewResponse){
    option (google.api.http) = {
      put: "/interview/{id}/activate"
    };
  };


    //  Certificate
  //Create new certificate
  rpc CreateCertificate (certificate.Certificate) returns (certificate.Id){
    option (google.api.http) = {
      post: "/certificate"
      body: "*"
    };
  };

  //Get all existing certificates
  rpc GetCertificates (certificate.Filter) returns (certificate.Certificates){
    option (google.api.http) = {
      get: "/certificate"
    };
  };


  //Update certificate data
  rpc UpdateCertificate (certificate.Certificate) returns (google.protobuf.BoolValue){
    option (google.api.http) = {
      put: "/certificate/{id}"
      body: "*"
    };
  };

  //Delete certificate by id
  rpc DeleteCertificate (certificate.Id) returns (google.protobuf.BoolValue){
    option (google.api.http) = {
      delete: "/certificate/{id}"
    };
  };


  //Get team by id
  rpc GetTeam (team.Id) returns (team.TeamResponse){
    option (google.api.http) = {
      get: "/team/{id}"
    };
  };

  //Get teams
  rpc GetTeams (team.TeamListFilter) returns (team.Teams){
    option (google.api.http) = {
      get: "/team"
    };
  };

  //Create new team
  rpc CreateTeam (team.TeamRequest) returns (team.Id){
    option (google.api.http) = {
      post: "/team"
      body: "*"
    };
  };

  //Update team's data
  rpc UpdateTeam (team.TeamRequest) returns (common.Empty){
    option (google.api.http) = {
      put: "/team"
      body: "*"
    };
  }

  //Deactivate team by id
  rpc DeactivateTeam (team.Id) returns (common.Empty){
    option (google.api.http) = {
      put: "/team/{id}/deactivate"
    };
  };

  //Activate team by id
  rpc ActivateTeam (team.Id) returns (common.Empty){
    option (google.api.http) = {
      put: "/team/{id}/activate"
    };
  };

  //Bind user to team
  rpc AddUserToTeam (team.UserTeamRequest) returns (common.Empty){
    option (google.api.http) = {
      post: "/team/{team_id}/{user_id}"
      body: "*"
    };
  };

  //Unbind user from team
  rpc DeleteUserFromTeam (team.UserTeamRequest) returns (common.Empty){
    option (google.api.http) = {
      delete: "/team/{team_id}/{user_id}"
    };
  };


  //Get group by id
  rpc GetGroup (group.Id) returns (group.GroupResponse){
    option (google.api.http) = {
      get: "/group/{id}"
    };
  };

  //Get groups
  rpc GetGroups (group.GroupsRequest) returns (group.Groups){
    option (google.api.http) = {
      get: "/group"
    };
  };

  //Create new group
  rpc CreateGroup (group.GroupRequest) returns (group.Id){
    option (google.api.http) = {
      post: "/group"
      body: "*"
    };
  };

  //Update group's data
  rpc UpdateGroup (group.GroupRequest) returns (common.Empty){
    option (google.api.http) = {
      put: "/group"
      body: "*"
    };
  }

  //Deactivate group by id
  rpc DeactivateGroup (group.Id) returns (common.Empty){
    option (google.api.http) = {
      put: "/group/{id}/deactivate"
    };
  };

  //Activate group by id
  rpc ActivateGroup (group.Id) returns (common.Empty){
    option (google.api.http) = {
      put: "/group/{id}/activate"
    };
  };

  //Bind user to group
  rpc AddUserToGroup (group.UserGroupRequest) returns (common.Empty){
    option (google.api.http) = {
      post: "/group/{group_id}/{user_id}"
      body: "*"
    };
  };

  //Unbind user from group
  rpc DeleteUserFromGroup (group.UserGroupRequest) returns (common.Empty){
    option (google.api.http) = {
      delete: "/group/{group_id}/{user_id}"
    };
  };
}


