// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package proto

import (
	context "context"
	helloworld "github.com/NEKETSKY/mnemosyne/proto/helloworld"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MnemosyneClient is the client API for Mnemosyne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MnemosyneClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error)
}

type mnemosyneClient struct {
	cc grpc.ClientConnInterface
}

func NewMnemosyneClient(cc grpc.ClientConnInterface) MnemosyneClient {
	return &mnemosyneClient{cc}
}

func (c *mnemosyneClient) SayHello(ctx context.Context, in *helloworld.HelloRequest, opts ...grpc.CallOption) (*helloworld.HelloReply, error) {
	out := new(helloworld.HelloReply)
	err := c.cc.Invoke(ctx, "/proto.Mnemosyne/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MnemosyneServer is the server API for Mnemosyne service.
// All implementations should embed UnimplementedMnemosyneServer
// for forward compatibility
type MnemosyneServer interface {
	// Sends a greeting
	SayHello(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error)
}

// UnimplementedMnemosyneServer should be embedded to have forward compatible implementations.
type UnimplementedMnemosyneServer struct {
}

func (UnimplementedMnemosyneServer) SayHello(context.Context, *helloworld.HelloRequest) (*helloworld.HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

// UnsafeMnemosyneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MnemosyneServer will
// result in compilation errors.
type UnsafeMnemosyneServer interface {
	mustEmbedUnimplementedMnemosyneServer()
}

func RegisterMnemosyneServer(s grpc.ServiceRegistrar, srv MnemosyneServer) {
	s.RegisterService(&Mnemosyne_ServiceDesc, srv)
}

func _Mnemosyne_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helloworld.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mnemosyne/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).SayHello(ctx, req.(*helloworld.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mnemosyne_ServiceDesc is the grpc.ServiceDesc for Mnemosyne service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mnemosyne_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mnemosyne",
	HandlerType: (*MnemosyneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Mnemosyne_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
