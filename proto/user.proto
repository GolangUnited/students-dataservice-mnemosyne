syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
option go_package = "github.com/NEKETSKY/mnemosyne/pkg/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Mnemosyne App API"
    description: "API Server for Mnemosyne application"
    version: "1.0"
    contact: {
      name: "Bar"
    }
  }
  host: "localhost:8000"
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "403"
    value: {
      description: "Returned when the user does not have permission to access the resource."
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: {
        json_schema: {
          type: STRING
        }
      }
    }
  }
  security_definitions: {
    security: {
      key: "BasicAuth"
      value: {
        type: TYPE_BASIC
      }
    }
    security: {
      key: "ApiKeyAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-API-Key"
        extensions: {
          key: "x-amazon-apigateway-authtype"
          value {
            string_value: "oauth2"
          }
        }
        extensions: {
          key: "x-amazon-apigateway-authorizer"
          value {
            struct_value {
              fields {
                key: "type"
                value {
                  string_value: "token"
                }
              }
              fields {
                key: "authorizerResultTtlInSeconds"
                value {
                  number_value: 60
                }
              }
            }
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "BasicAuth"
      value: {}
    }
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
};

message User {
  string last_name = 1 ;
  string first_name = 2 ;
  optional string middle_name = 3;
  string email = 4;
  string language = 5;
  string english_level = 6;
  string photo = 7;
  string experience = 8;
  string country = 9;
  string city = 10;
  string time_zone = 11;
}

message All_users {
  repeated User users = 1;
}
message Email{
  string email = 1;
}
message Empty {

}


service UserMess {
  rpc CreateUser (User) returns (Email);
  rpc GetAllUsers (Empty) returns (All_users);
  rpc GetUser (Email) returns (User);
  rpc UpdateUser (User) returns (Email);
  rpc DeleteUser (Email) returns (Empty) ; 
}
