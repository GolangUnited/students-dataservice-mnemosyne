// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package api

import (
	context "context"
	certificate "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/certificate"
	common "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/common"
	group "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/group"
	interview "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/interview"
	role "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/role"
	team "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/team"
	user "github.com/GolangUnited/students-dataservice-mnemosyne/pkg/api/user"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MnemosyneClient is the client API for Mnemosyne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MnemosyneClient interface {
	//Create new user
	CreateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*user.Id, error)
	//Get all existing users
	GetUsers(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.Users, error)
	//Get user by id
	GetUserById(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.User, error)
	//Get user by email
	GetUserByEmail(ctx context.Context, in *user.Email, opts ...grpc.CallOption) (*user.User, error)
	//Update user's data
	UpdateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*common.Empty, error)
	//Delete user by id
	DeactivateUser(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Activate user by id
	ActivateUser(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Get contact by ID
	GetContact(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.Contact, error)
	//Update contact's data
	UpdateContact(ctx context.Context, in *user.Contact, opts ...grpc.CallOption) (*common.Empty, error)
	//Get resume by ID
	GetResume(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.Resume, error)
	//Update resume data
	UpdateResume(ctx context.Context, in *user.Resume, opts ...grpc.CallOption) (*common.Empty, error)
	//Delete contacts by ID
	DeleteContact(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Delete resume by ID
	DeleteResume(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//  INTERVIEW
	//Create new interview
	CreateInterview(ctx context.Context, in *interview.InterviewRequest, opts ...grpc.CallOption) (*interview.InterviewResponse, error)
	//Get all existing interviews
	GetInterviews(ctx context.Context, in *interview.InterviewList, opts ...grpc.CallOption) (*interview.Interviews, error)
	//Get interview by id
	GetInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error)
	//Update interview data
	UpdateInterview(ctx context.Context, in *interview.InterviewRequest, opts ...grpc.CallOption) (*interview.InterviewResponse, error)
	//Deactivate interview by id
	DeactivateInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error)
	//Activate interview by id
	ActivateInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error)
	//  Certificate
	//Create new certificate
	CreateCertificate(ctx context.Context, in *certificate.CertificateRequest, opts ...grpc.CallOption) (*certificate.CertificateResponse, error)
	//Get all existing certificates
	GetCertificates(ctx context.Context, in *certificate.Filter, opts ...grpc.CallOption) (*certificate.Certificates, error)
	//Update certificate data
	UpdateCertificate(ctx context.Context, in *certificate.CertificateRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Deactivate certificate by id
	DeactivateCertificate(ctx context.Context, in *certificate.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Activate certificate by id
	ActivateCertificate(ctx context.Context, in *certificate.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Get team by id
	GetTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*team.TeamResponse, error)
	//Get teams
	GetTeams(ctx context.Context, in *team.TeamListFilter, opts ...grpc.CallOption) (*team.Teams, error)
	//Create new team
	CreateTeam(ctx context.Context, in *team.TeamRequest, opts ...grpc.CallOption) (*team.Id, error)
	//Update team's data
	UpdateTeam(ctx context.Context, in *team.TeamRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Deactivate team by id
	DeactivateTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Activate team by id
	ActivateTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Bind user to team
	AddUserToTeam(ctx context.Context, in *team.UserTeamRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Unbind user from team
	DeleteUserFromTeam(ctx context.Context, in *team.UserTeamRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Get group by id
	GetGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*group.GroupResponse, error)
	//Get groups
	GetGroups(ctx context.Context, in *group.GroupsRequest, opts ...grpc.CallOption) (*group.Groups, error)
	//Create new group
	CreateGroup(ctx context.Context, in *group.GroupRequest, opts ...grpc.CallOption) (*group.Id, error)
	//Update group's data
	UpdateGroup(ctx context.Context, in *group.GroupRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Deactivate group by id
	DeactivateGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Activate group by id
	ActivateGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Bind user to group
	AddUserToGroup(ctx context.Context, in *group.UserGroupRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Unbind user from group
	DeleteUserFromGroup(ctx context.Context, in *group.UserGroupRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Get roles
	GetRoles(ctx context.Context, in *role.RolesRequest, opts ...grpc.CallOption) (*role.Roles, error)
	//Create new role
	CreateRole(ctx context.Context, in *role.Role, opts ...grpc.CallOption) (*role.Id, error)
	//Delete role by id
	DeleteRole(ctx context.Context, in *role.Id, opts ...grpc.CallOption) (*common.Empty, error)
	//Bind user to role
	AddUserToRole(ctx context.Context, in *role.UserRoleRequest, opts ...grpc.CallOption) (*common.Empty, error)
	//Unbind user from role
	DeleteUserFromRole(ctx context.Context, in *role.UserRoleRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type mnemosyneClient struct {
	cc grpc.ClientConnInterface
}

func NewMnemosyneClient(cc grpc.ClientConnInterface) MnemosyneClient {
	return &mnemosyneClient{cc}
}

func (c *mnemosyneClient) CreateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*user.Id, error) {
	out := new(user.Id)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetUsers(ctx context.Context, in *user.UserRequest, opts ...grpc.CallOption) (*user.Users, error) {
	out := new(user.Users)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetUserById(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.User, error) {
	out := new(user.User)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetUserByEmail(ctx context.Context, in *user.Email, opts ...grpc.CallOption) (*user.User, error) {
	out := new(user.User)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeactivateUser(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeactivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) ActivateUser(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/ActivateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetContact(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.Contact, error) {
	out := new(user.Contact)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateContact(ctx context.Context, in *user.Contact, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetResume(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*user.Resume, error) {
	out := new(user.Resume)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateResume(ctx context.Context, in *user.Resume, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteContact(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteResume(ctx context.Context, in *user.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) CreateInterview(ctx context.Context, in *interview.InterviewRequest, opts ...grpc.CallOption) (*interview.InterviewResponse, error) {
	out := new(interview.InterviewResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetInterviews(ctx context.Context, in *interview.InterviewList, opts ...grpc.CallOption) (*interview.Interviews, error) {
	out := new(interview.Interviews)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetInterviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error) {
	out := new(interview.InterviewResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateInterview(ctx context.Context, in *interview.InterviewRequest, opts ...grpc.CallOption) (*interview.InterviewResponse, error) {
	out := new(interview.InterviewResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeactivateInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error) {
	out := new(interview.InterviewResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeactivateInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) ActivateInterview(ctx context.Context, in *interview.Id, opts ...grpc.CallOption) (*interview.InterviewResponse, error) {
	out := new(interview.InterviewResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/ActivateInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) CreateCertificate(ctx context.Context, in *certificate.CertificateRequest, opts ...grpc.CallOption) (*certificate.CertificateResponse, error) {
	out := new(certificate.CertificateResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetCertificates(ctx context.Context, in *certificate.Filter, opts ...grpc.CallOption) (*certificate.Certificates, error) {
	out := new(certificate.Certificates)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateCertificate(ctx context.Context, in *certificate.CertificateRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeactivateCertificate(ctx context.Context, in *certificate.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeactivateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) ActivateCertificate(ctx context.Context, in *certificate.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/ActivateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*team.TeamResponse, error) {
	out := new(team.TeamResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetTeams(ctx context.Context, in *team.TeamListFilter, opts ...grpc.CallOption) (*team.Teams, error) {
	out := new(team.Teams)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) CreateTeam(ctx context.Context, in *team.TeamRequest, opts ...grpc.CallOption) (*team.Id, error) {
	out := new(team.Id)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateTeam(ctx context.Context, in *team.TeamRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeactivateTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeactivateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) ActivateTeam(ctx context.Context, in *team.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/ActivateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) AddUserToTeam(ctx context.Context, in *team.UserTeamRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/AddUserToTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteUserFromTeam(ctx context.Context, in *team.UserTeamRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteUserFromTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*group.GroupResponse, error) {
	out := new(group.GroupResponse)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetGroups(ctx context.Context, in *group.GroupsRequest, opts ...grpc.CallOption) (*group.Groups, error) {
	out := new(group.Groups)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) CreateGroup(ctx context.Context, in *group.GroupRequest, opts ...grpc.CallOption) (*group.Id, error) {
	out := new(group.Id)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) UpdateGroup(ctx context.Context, in *group.GroupRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeactivateGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeactivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) ActivateGroup(ctx context.Context, in *group.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/ActivateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) AddUserToGroup(ctx context.Context, in *group.UserGroupRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/AddUserToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteUserFromGroup(ctx context.Context, in *group.UserGroupRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteUserFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) GetRoles(ctx context.Context, in *role.RolesRequest, opts ...grpc.CallOption) (*role.Roles, error) {
	out := new(role.Roles)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) CreateRole(ctx context.Context, in *role.Role, opts ...grpc.CallOption) (*role.Id, error) {
	out := new(role.Id)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteRole(ctx context.Context, in *role.Id, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) AddUserToRole(ctx context.Context, in *role.UserRoleRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/AddUserToRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mnemosyneClient) DeleteUserFromRole(ctx context.Context, in *role.UserRoleRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/api.Mnemosyne/DeleteUserFromRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MnemosyneServer is the server API for Mnemosyne service.
// All implementations should embed UnimplementedMnemosyneServer
// for forward compatibility
type MnemosyneServer interface {
	//Create new user
	CreateUser(context.Context, *user.User) (*user.Id, error)
	//Get all existing users
	GetUsers(context.Context, *user.UserRequest) (*user.Users, error)
	//Get user by id
	GetUserById(context.Context, *user.Id) (*user.User, error)
	//Get user by email
	GetUserByEmail(context.Context, *user.Email) (*user.User, error)
	//Update user's data
	UpdateUser(context.Context, *user.User) (*common.Empty, error)
	//Delete user by id
	DeactivateUser(context.Context, *user.Id) (*common.Empty, error)
	//Activate user by id
	ActivateUser(context.Context, *user.Id) (*common.Empty, error)
	//Get contact by ID
	GetContact(context.Context, *user.Id) (*user.Contact, error)
	//Update contact's data
	UpdateContact(context.Context, *user.Contact) (*common.Empty, error)
	//Get resume by ID
	GetResume(context.Context, *user.Id) (*user.Resume, error)
	//Update resume data
	UpdateResume(context.Context, *user.Resume) (*common.Empty, error)
	//Delete contacts by ID
	DeleteContact(context.Context, *user.Id) (*common.Empty, error)
	//Delete resume by ID
	DeleteResume(context.Context, *user.Id) (*common.Empty, error)
	//  INTERVIEW
	//Create new interview
	CreateInterview(context.Context, *interview.InterviewRequest) (*interview.InterviewResponse, error)
	//Get all existing interviews
	GetInterviews(context.Context, *interview.InterviewList) (*interview.Interviews, error)
	//Get interview by id
	GetInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error)
	//Update interview data
	UpdateInterview(context.Context, *interview.InterviewRequest) (*interview.InterviewResponse, error)
	//Deactivate interview by id
	DeactivateInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error)
	//Activate interview by id
	ActivateInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error)
	//  Certificate
	//Create new certificate
	CreateCertificate(context.Context, *certificate.CertificateRequest) (*certificate.CertificateResponse, error)
	//Get all existing certificates
	GetCertificates(context.Context, *certificate.Filter) (*certificate.Certificates, error)
	//Update certificate data
	UpdateCertificate(context.Context, *certificate.CertificateRequest) (*common.Empty, error)
	//Deactivate certificate by id
	DeactivateCertificate(context.Context, *certificate.Id) (*common.Empty, error)
	//Activate certificate by id
	ActivateCertificate(context.Context, *certificate.Id) (*common.Empty, error)
	//Get team by id
	GetTeam(context.Context, *team.Id) (*team.TeamResponse, error)
	//Get teams
	GetTeams(context.Context, *team.TeamListFilter) (*team.Teams, error)
	//Create new team
	CreateTeam(context.Context, *team.TeamRequest) (*team.Id, error)
	//Update team's data
	UpdateTeam(context.Context, *team.TeamRequest) (*common.Empty, error)
	//Deactivate team by id
	DeactivateTeam(context.Context, *team.Id) (*common.Empty, error)
	//Activate team by id
	ActivateTeam(context.Context, *team.Id) (*common.Empty, error)
	//Bind user to team
	AddUserToTeam(context.Context, *team.UserTeamRequest) (*common.Empty, error)
	//Unbind user from team
	DeleteUserFromTeam(context.Context, *team.UserTeamRequest) (*common.Empty, error)
	//Get group by id
	GetGroup(context.Context, *group.Id) (*group.GroupResponse, error)
	//Get groups
	GetGroups(context.Context, *group.GroupsRequest) (*group.Groups, error)
	//Create new group
	CreateGroup(context.Context, *group.GroupRequest) (*group.Id, error)
	//Update group's data
	UpdateGroup(context.Context, *group.GroupRequest) (*common.Empty, error)
	//Deactivate group by id
	DeactivateGroup(context.Context, *group.Id) (*common.Empty, error)
	//Activate group by id
	ActivateGroup(context.Context, *group.Id) (*common.Empty, error)
	//Bind user to group
	AddUserToGroup(context.Context, *group.UserGroupRequest) (*common.Empty, error)
	//Unbind user from group
	DeleteUserFromGroup(context.Context, *group.UserGroupRequest) (*common.Empty, error)
	//Get roles
	GetRoles(context.Context, *role.RolesRequest) (*role.Roles, error)
	//Create new role
	CreateRole(context.Context, *role.Role) (*role.Id, error)
	//Delete role by id
	DeleteRole(context.Context, *role.Id) (*common.Empty, error)
	//Bind user to role
	AddUserToRole(context.Context, *role.UserRoleRequest) (*common.Empty, error)
	//Unbind user from role
	DeleteUserFromRole(context.Context, *role.UserRoleRequest) (*common.Empty, error)
}

// UnimplementedMnemosyneServer should be embedded to have forward compatible implementations.
type UnimplementedMnemosyneServer struct {
}

func (UnimplementedMnemosyneServer) CreateUser(context.Context, *user.User) (*user.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMnemosyneServer) GetUsers(context.Context, *user.UserRequest) (*user.Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMnemosyneServer) GetUserById(context.Context, *user.Id) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedMnemosyneServer) GetUserByEmail(context.Context, *user.Email) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedMnemosyneServer) UpdateUser(context.Context, *user.User) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMnemosyneServer) DeactivateUser(context.Context, *user.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedMnemosyneServer) ActivateUser(context.Context, *user.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedMnemosyneServer) GetContact(context.Context, *user.Id) (*user.Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedMnemosyneServer) UpdateContact(context.Context, *user.Contact) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedMnemosyneServer) GetResume(context.Context, *user.Id) (*user.Resume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResume not implemented")
}
func (UnimplementedMnemosyneServer) UpdateResume(context.Context, *user.Resume) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResume not implemented")
}
func (UnimplementedMnemosyneServer) DeleteContact(context.Context, *user.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedMnemosyneServer) DeleteResume(context.Context, *user.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedMnemosyneServer) CreateInterview(context.Context, *interview.InterviewRequest) (*interview.InterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterview not implemented")
}
func (UnimplementedMnemosyneServer) GetInterviews(context.Context, *interview.InterviewList) (*interview.Interviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterviews not implemented")
}
func (UnimplementedMnemosyneServer) GetInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterview not implemented")
}
func (UnimplementedMnemosyneServer) UpdateInterview(context.Context, *interview.InterviewRequest) (*interview.InterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterview not implemented")
}
func (UnimplementedMnemosyneServer) DeactivateInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateInterview not implemented")
}
func (UnimplementedMnemosyneServer) ActivateInterview(context.Context, *interview.Id) (*interview.InterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateInterview not implemented")
}
func (UnimplementedMnemosyneServer) CreateCertificate(context.Context, *certificate.CertificateRequest) (*certificate.CertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (UnimplementedMnemosyneServer) GetCertificates(context.Context, *certificate.Filter) (*certificate.Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificates not implemented")
}
func (UnimplementedMnemosyneServer) UpdateCertificate(context.Context, *certificate.CertificateRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificate not implemented")
}
func (UnimplementedMnemosyneServer) DeactivateCertificate(context.Context, *certificate.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateCertificate not implemented")
}
func (UnimplementedMnemosyneServer) ActivateCertificate(context.Context, *certificate.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCertificate not implemented")
}
func (UnimplementedMnemosyneServer) GetTeam(context.Context, *team.Id) (*team.TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedMnemosyneServer) GetTeams(context.Context, *team.TeamListFilter) (*team.Teams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedMnemosyneServer) CreateTeam(context.Context, *team.TeamRequest) (*team.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedMnemosyneServer) UpdateTeam(context.Context, *team.TeamRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedMnemosyneServer) DeactivateTeam(context.Context, *team.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateTeam not implemented")
}
func (UnimplementedMnemosyneServer) ActivateTeam(context.Context, *team.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateTeam not implemented")
}
func (UnimplementedMnemosyneServer) AddUserToTeam(context.Context, *team.UserTeamRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToTeam not implemented")
}
func (UnimplementedMnemosyneServer) DeleteUserFromTeam(context.Context, *team.UserTeamRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromTeam not implemented")
}
func (UnimplementedMnemosyneServer) GetGroup(context.Context, *group.Id) (*group.GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedMnemosyneServer) GetGroups(context.Context, *group.GroupsRequest) (*group.Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedMnemosyneServer) CreateGroup(context.Context, *group.GroupRequest) (*group.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMnemosyneServer) UpdateGroup(context.Context, *group.GroupRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedMnemosyneServer) DeactivateGroup(context.Context, *group.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateGroup not implemented")
}
func (UnimplementedMnemosyneServer) ActivateGroup(context.Context, *group.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateGroup not implemented")
}
func (UnimplementedMnemosyneServer) AddUserToGroup(context.Context, *group.UserGroupRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToGroup not implemented")
}
func (UnimplementedMnemosyneServer) DeleteUserFromGroup(context.Context, *group.UserGroupRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromGroup not implemented")
}
func (UnimplementedMnemosyneServer) GetRoles(context.Context, *role.RolesRequest) (*role.Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedMnemosyneServer) CreateRole(context.Context, *role.Role) (*role.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMnemosyneServer) DeleteRole(context.Context, *role.Id) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedMnemosyneServer) AddUserToRole(context.Context, *role.UserRoleRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToRole not implemented")
}
func (UnimplementedMnemosyneServer) DeleteUserFromRole(context.Context, *role.UserRoleRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFromRole not implemented")
}

// UnsafeMnemosyneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MnemosyneServer will
// result in compilation errors.
type UnsafeMnemosyneServer interface {
	mustEmbedUnimplementedMnemosyneServer()
}

func RegisterMnemosyneServer(s grpc.ServiceRegistrar, srv MnemosyneServer) {
	s.RegisterService(&Mnemosyne_ServiceDesc, srv)
}

func _Mnemosyne_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetUsers(ctx, req.(*user.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetUserById(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetUserByEmail(ctx, req.(*user.Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeactivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeactivateUser(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/ActivateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).ActivateUser(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetContact(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateContact(ctx, req.(*user.Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetResume(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Resume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateResume(ctx, req.(*user.Resume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteContact(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteResume(ctx, req.(*user.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_CreateInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.InterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateInterview(ctx, req.(*interview.InterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetInterviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.InterviewList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetInterviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetInterviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetInterviews(ctx, req.(*interview.InterviewList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetInterview(ctx, req.(*interview.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.InterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateInterview(ctx, req.(*interview.InterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeactivateInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeactivateInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeactivateInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeactivateInterview(ctx, req.(*interview.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_ActivateInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(interview.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).ActivateInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/ActivateInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).ActivateInterview(ctx, req.(*interview.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(certificate.CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateCertificate(ctx, req.(*certificate.CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(certificate.Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetCertificates(ctx, req.(*certificate.Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(certificate.CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateCertificate(ctx, req.(*certificate.CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeactivateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(certificate.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeactivateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeactivateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeactivateCertificate(ctx, req.(*certificate.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_ActivateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(certificate.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).ActivateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/ActivateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).ActivateCertificate(ctx, req.(*certificate.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetTeam(ctx, req.(*team.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.TeamListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetTeams(ctx, req.(*team.TeamListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateTeam(ctx, req.(*team.TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateTeam(ctx, req.(*team.TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeactivateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeactivateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeactivateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeactivateTeam(ctx, req.(*team.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_ActivateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).ActivateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/ActivateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).ActivateTeam(ctx, req.(*team.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_AddUserToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.UserTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).AddUserToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/AddUserToTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).AddUserToTeam(ctx, req.(*team.UserTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteUserFromTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(team.UserTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteUserFromTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteUserFromTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteUserFromTeam(ctx, req.(*team.UserTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetGroup(ctx, req.(*group.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetGroups(ctx, req.(*group.GroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateGroup(ctx, req.(*group.GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).UpdateGroup(ctx, req.(*group.GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeactivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeactivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeactivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeactivateGroup(ctx, req.(*group.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_ActivateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).ActivateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/ActivateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).ActivateGroup(ctx, req.(*group.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).AddUserToGroup(ctx, req.(*group.UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(group.UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteUserFromGroup(ctx, req.(*group.UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.RolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).GetRoles(ctx, req.(*role.RolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).CreateRole(ctx, req.(*role.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteRole(ctx, req.(*role.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_AddUserToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).AddUserToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/AddUserToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).AddUserToRole(ctx, req.(*role.UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mnemosyne_DeleteUserFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(role.UserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MnemosyneServer).DeleteUserFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Mnemosyne/DeleteUserFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MnemosyneServer).DeleteUserFromRole(ctx, req.(*role.UserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mnemosyne_ServiceDesc is the grpc.ServiceDesc for Mnemosyne service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mnemosyne_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Mnemosyne",
	HandlerType: (*MnemosyneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Mnemosyne_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Mnemosyne_GetUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Mnemosyne_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _Mnemosyne_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Mnemosyne_UpdateUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _Mnemosyne_DeactivateUser_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _Mnemosyne_ActivateUser_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Mnemosyne_GetContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Mnemosyne_UpdateContact_Handler,
		},
		{
			MethodName: "GetResume",
			Handler:    _Mnemosyne_GetResume_Handler,
		},
		{
			MethodName: "UpdateResume",
			Handler:    _Mnemosyne_UpdateResume_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Mnemosyne_DeleteContact_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _Mnemosyne_DeleteResume_Handler,
		},
		{
			MethodName: "CreateInterview",
			Handler:    _Mnemosyne_CreateInterview_Handler,
		},
		{
			MethodName: "GetInterviews",
			Handler:    _Mnemosyne_GetInterviews_Handler,
		},
		{
			MethodName: "GetInterview",
			Handler:    _Mnemosyne_GetInterview_Handler,
		},
		{
			MethodName: "UpdateInterview",
			Handler:    _Mnemosyne_UpdateInterview_Handler,
		},
		{
			MethodName: "DeactivateInterview",
			Handler:    _Mnemosyne_DeactivateInterview_Handler,
		},
		{
			MethodName: "ActivateInterview",
			Handler:    _Mnemosyne_ActivateInterview_Handler,
		},
		{
			MethodName: "CreateCertificate",
			Handler:    _Mnemosyne_CreateCertificate_Handler,
		},
		{
			MethodName: "GetCertificates",
			Handler:    _Mnemosyne_GetCertificates_Handler,
		},
		{
			MethodName: "UpdateCertificate",
			Handler:    _Mnemosyne_UpdateCertificate_Handler,
		},
		{
			MethodName: "DeactivateCertificate",
			Handler:    _Mnemosyne_DeactivateCertificate_Handler,
		},
		{
			MethodName: "ActivateCertificate",
			Handler:    _Mnemosyne_ActivateCertificate_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Mnemosyne_GetTeam_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _Mnemosyne_GetTeams_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Mnemosyne_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Mnemosyne_UpdateTeam_Handler,
		},
		{
			MethodName: "DeactivateTeam",
			Handler:    _Mnemosyne_DeactivateTeam_Handler,
		},
		{
			MethodName: "ActivateTeam",
			Handler:    _Mnemosyne_ActivateTeam_Handler,
		},
		{
			MethodName: "AddUserToTeam",
			Handler:    _Mnemosyne_AddUserToTeam_Handler,
		},
		{
			MethodName: "DeleteUserFromTeam",
			Handler:    _Mnemosyne_DeleteUserFromTeam_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Mnemosyne_GetGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Mnemosyne_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Mnemosyne_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Mnemosyne_UpdateGroup_Handler,
		},
		{
			MethodName: "DeactivateGroup",
			Handler:    _Mnemosyne_DeactivateGroup_Handler,
		},
		{
			MethodName: "ActivateGroup",
			Handler:    _Mnemosyne_ActivateGroup_Handler,
		},
		{
			MethodName: "AddUserToGroup",
			Handler:    _Mnemosyne_AddUserToGroup_Handler,
		},
		{
			MethodName: "DeleteUserFromGroup",
			Handler:    _Mnemosyne_DeleteUserFromGroup_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Mnemosyne_GetRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Mnemosyne_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Mnemosyne_DeleteRole_Handler,
		},
		{
			MethodName: "AddUserToRole",
			Handler:    _Mnemosyne_AddUserToRole_Handler,
		},
		{
			MethodName: "DeleteUserFromRole",
			Handler:    _Mnemosyne_DeleteUserFromRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
