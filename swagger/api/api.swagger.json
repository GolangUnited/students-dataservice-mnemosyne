{
  "swagger": "2.0",
  "info": {
    "title": "Mnemosyne App API",
    "description": "API Server for Mnemosyne application",
    "version": "1.0",
    "contact": {
      "name": "Bar"
    }
  },
  "tags": [
    {
      "name": "Mnemosyne"
    }
  ],
  "host": "localhost:8000",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/certificate": {
      "get": {
        "summary": "Get all existing certificates",
        "operationId": "Mnemosyne_GetCertificates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/certificateCertificates"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Certificate\nCreate new certificate",
        "operationId": "Mnemosyne_CreateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/certificateCertificateResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a certificate.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/certificateCertificateRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/certificate/{id}": {
      "put": {
        "summary": "Update certificate data",
        "operationId": "Mnemosyne_UpdateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "integer",
                  "format": "int64"
                },
                "issueDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "expireDate": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "description": "The basic message containing the primary information about a certificate.",
              "title": "Certificate json schema",
              "required": [
                "userId",
                "issueDate",
                "expireDate"
              ]
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/certificate/{id}/activate": {
      "put": {
        "summary": "Activate certificate by id",
        "operationId": "Mnemosyne_ActivateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/certificate/{id}/deactivate": {
      "put": {
        "summary": "Deactivate certificate by id",
        "operationId": "Mnemosyne_DeactivateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "summary": "Get contact by ID",
        "operationId": "Mnemosyne_GetContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userContact"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "delete": {
        "summary": "Delete contacts by ID",
        "operationId": "Mnemosyne_DeleteContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update contact's data",
        "operationId": "Mnemosyne_UpdateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "telegram",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "discord",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "communicationChannel",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/group": {
      "get": {
        "summary": "Get groups",
        "operationId": "Mnemosyne_GetGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupGroups"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.userId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Create new group",
        "operationId": "Mnemosyne_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupId"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupGroupRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update group's data",
        "operationId": "Mnemosyne_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/groupGroupRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/group/{groupId}/{userId}": {
      "delete": {
        "summary": "Unbind user from group",
        "operationId": "Mnemosyne_DeleteUserFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Bind user to group",
        "operationId": "Mnemosyne_AddUserToGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/group/{id}": {
      "get": {
        "summary": "Get group by id",
        "operationId": "Mnemosyne_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/groupGroupResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/group/{id}/activate": {
      "put": {
        "summary": "Activate group by id",
        "operationId": "Mnemosyne_ActivateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/group/{id}/deactivate": {
      "put": {
        "summary": "Deactivate group by id",
        "operationId": "Mnemosyne_DeactivateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/interview": {
      "get": {
        "summary": "Get all existing interviews",
        "operationId": "Mnemosyne_GetInterviews",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviews"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "interviewerId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "INTERVIEW\nCreate new interview",
        "operationId": "Mnemosyne_CreateInterview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviewResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a interview.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/interviewInterviewRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/interview/{id}": {
      "get": {
        "summary": "Get interview by id",
        "operationId": "Mnemosyne_GetInterview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviewResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update interview data",
        "operationId": "Mnemosyne_UpdateInterview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviewResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "interviewerId": {
                  "type": "integer",
                  "format": "int64"
                },
                "studentId": {
                  "type": "integer",
                  "format": "int64"
                },
                "interviewDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "grade": {
                  "type": "integer",
                  "format": "int64"
                },
                "subjectiveRating": {
                  "type": "string"
                },
                "notes": {
                  "type": "string"
                },
                "determinedEnglishLevel": {
                  "type": "string"
                },
                "mainTask": {
                  "type": "integer",
                  "format": "int64"
                },
                "question": {
                  "type": "string"
                }
              },
              "description": "The basic message containing the primary information about a interview.",
              "title": "Interview json schema",
              "required": [
                "interviewerId",
                "studentId",
                "interviewDate",
                "grade",
                "subjectiveRating",
                "notes",
                "determinedEnglishLevel",
                "mainTask",
                "question"
              ]
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/interview/{id}/activate": {
      "put": {
        "summary": "Activate interview by id",
        "operationId": "Mnemosyne_ActivateInterview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviewResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/interview/{id}/deactivate": {
      "put": {
        "summary": "Deactivate interview by id",
        "operationId": "Mnemosyne_DeactivateInterview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/interviewInterviewResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/resume/{id}": {
      "get": {
        "summary": "Get resume by ID",
        "operationId": "Mnemosyne_GetResume",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userResume"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "delete": {
        "summary": "Delete resume by ID",
        "operationId": "Mnemosyne_DeleteResume",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update resume data",
        "operationId": "Mnemosyne_UpdateResume",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploadedResume.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "uploadedResume.content",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "mentorsNote",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "experience",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeZone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/role": {
      "get": {
        "summary": "Get roles",
        "operationId": "Mnemosyne_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/roleRoles"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.code",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Create new role",
        "operationId": "Mnemosyne_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/roleId"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a role.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/roleRole"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/role/{id}": {
      "delete": {
        "summary": "Delete role by id",
        "operationId": "Mnemosyne_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/role/{roleId}/{userId}": {
      "delete": {
        "summary": "Unbind user from role",
        "operationId": "Mnemosyne_DeleteUserFromRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Bind user to role",
        "operationId": "Mnemosyne_AddUserToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/team": {
      "get": {
        "summary": "Get teams",
        "operationId": "Mnemosyne_GetTeams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/teamTeams"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "mentorId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Create new team",
        "operationId": "Mnemosyne_CreateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/teamId"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the primary information about a team for create \u0026 update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teamTeamRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update team's data",
        "operationId": "Mnemosyne_UpdateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the primary information about a team for create \u0026 update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teamTeamRequest"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/team/{id}": {
      "get": {
        "summary": "Get team by id",
        "operationId": "Mnemosyne_GetTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/teamTeamResponse"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/team/{id}/activate": {
      "put": {
        "summary": "Activate team by id",
        "operationId": "Mnemosyne_ActivateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/team/{id}/deactivate": {
      "put": {
        "summary": "Deactivate team by id",
        "operationId": "Mnemosyne_DeactivateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/team/{teamId}/{userId}": {
      "delete": {
        "summary": "Unbind user from team",
        "operationId": "Mnemosyne_DeleteUserFromTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Bind user to team",
        "operationId": "Mnemosyne_AddUserToTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Get all existing users",
        "operationId": "Mnemosyne_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUsers"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "option.withContacts",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "option.withResume",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "option.withDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "option.teamId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "option.groupId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "role.role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.fieldName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.fieldValue",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "post": {
        "summary": "Create new user",
        "operationId": "Mnemosyne_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userId"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUser"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "put": {
        "summary": "Update user's data",
        "operationId": "Mnemosyne_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The basic message containing the primary information about a user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUser"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/user/{email}": {
      "get": {
        "summary": "Get user by email",
        "operationId": "Mnemosyne_GetUserByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUser"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get user by id",
        "operationId": "Mnemosyne_GetUserById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/userUser"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      },
      "delete": {
        "summary": "Delete user by id",
        "operationId": "Mnemosyne_DeactivateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    },
    "/user/{id}/activate": {
      "put": {
        "summary": "Activate user by id",
        "operationId": "Mnemosyne_ActivateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonEmpty"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Id json schema"
            }
          }
        ],
        "tags": [
          "Mnemosyne"
        ]
      }
    }
  },
  "definitions": {
    "certificateCertificateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time"
        },
        "expireDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The basic message containing the primary information about a certificate.",
      "title": "Certificate json schema",
      "required": [
        "userId",
        "issueDate",
        "expireDate"
      ]
    },
    "certificateCertificateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time"
        },
        "expireDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "title": "Certificate json schema",
      "required": [
        "userId",
        "issueDate",
        "expireDate"
      ]
    },
    "certificateCertificates": {
      "type": "object",
      "properties": {
        "Certificates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/certificateCertificateResponse"
          }
        }
      },
      "title": "Certificates json schema",
      "required": [
        "Certificates"
      ]
    },
    "commonEmpty": {
      "type": "object",
      "title": "transitory message for rpc methods that temporary get or return nothing"
    },
    "commonFile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "groupFilter": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "title": "Filter groups json schema"
    },
    "groupGroupRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "The basic message containing the primary information about a group.",
      "title": "Group json schema",
      "required": [
        "name",
        "startDate",
        "endDate"
      ]
    },
    "groupGroupResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "description": "The basic message containing the primary information about a group.",
      "title": "Group json schema",
      "required": [
        "name",
        "startDate",
        "endDate"
      ]
    },
    "groupGroups": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/groupGroupResponse"
          }
        }
      },
      "title": "Groups json schema",
      "required": [
        "groups"
      ]
    },
    "groupId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Id json schema",
      "required": [
        "id"
      ]
    },
    "interviewInterviewRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "interviewerId": {
          "type": "integer",
          "format": "int64"
        },
        "studentId": {
          "type": "integer",
          "format": "int64"
        },
        "interviewDate": {
          "type": "string",
          "format": "date-time"
        },
        "grade": {
          "type": "integer",
          "format": "int64"
        },
        "subjectiveRating": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "determinedEnglishLevel": {
          "type": "string"
        },
        "mainTask": {
          "type": "integer",
          "format": "int64"
        },
        "question": {
          "type": "string"
        }
      },
      "description": "The basic message containing the primary information about a interview.",
      "title": "Interview json schema",
      "required": [
        "interviewerId",
        "studentId",
        "interviewDate",
        "grade",
        "subjectiveRating",
        "notes",
        "determinedEnglishLevel",
        "mainTask",
        "question"
      ]
    },
    "interviewInterviewResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "interviewerId": {
          "type": "integer",
          "format": "int64"
        },
        "studentId": {
          "type": "integer",
          "format": "int64"
        },
        "interviewDate": {
          "type": "string",
          "format": "date-time"
        },
        "grade": {
          "type": "integer",
          "format": "int64"
        },
        "subjectiveRating": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "determinedEnglishLevel": {
          "type": "string"
        },
        "mainTask": {
          "type": "integer",
          "format": "int64"
        },
        "question": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "title": "Interview response json schema"
    },
    "interviewInterviews": {
      "type": "object",
      "properties": {
        "interviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/interviewInterviewResponse"
          }
        }
      },
      "title": "Interviews json schema",
      "required": [
        "interviews"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "roleFilter": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      },
      "title": "Filter roles json schema"
    },
    "roleId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Id json schema",
      "required": [
        "id"
      ]
    },
    "roleRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "code": {
          "type": "string"
        }
      },
      "description": "The basic message containing the primary information about a role.",
      "title": "Role json schema",
      "required": [
        "code"
      ]
    },
    "roleRoles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/roleRole"
          }
        }
      },
      "title": "Roles json schema",
      "required": [
        "roles"
      ]
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "teamId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Id json schema",
      "required": [
        "id"
      ]
    },
    "teamTeamRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "mentorId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "The request message containing the primary information about a team for create \u0026 update.",
      "title": "Team json schema",
      "required": [
        "groupId",
        "name",
        "startDate",
        "endDate",
        "mentorId"
      ]
    },
    "teamTeamResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "mentorId": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "description": "The response message containing the all information about a team from DB.",
      "title": "Team json schema"
    },
    "teamTeams": {
      "type": "object",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/teamTeamResponse"
          }
        }
      },
      "title": "Teams json schema",
      "required": [
        "teams"
      ]
    },
    "userContact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "telegram": {
          "type": "string"
        },
        "discord": {
          "type": "string"
        },
        "communicationChannel": {
          "type": "string"
        }
      },
      "title": "Contact json schema",
      "required": [
        "telegram",
        "discord",
        "communicationChannel"
      ]
    },
    "userFilter": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "fieldValue": {
          "type": "string"
        }
      },
      "title": "filter for info related to user(primary user info, contacts and resume)"
    },
    "userId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "Id json schema",
      "required": [
        "id"
      ]
    },
    "userOption": {
      "type": "object",
      "properties": {
        "withContacts": {
          "type": "boolean"
        },
        "withResume": {
          "type": "boolean"
        },
        "withDeleted": {
          "type": "boolean"
        },
        "teamId": {
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Request options about composition of user's info"
    },
    "userResume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uploadedResume": {
          "$ref": "#/definitions/commonFile"
        },
        "mentorsNote": {
          "type": "string"
        },
        "experience": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "title": "Resume json schema",
      "required": [
        "uploadedResume",
        "mentorsNote",
        "experience",
        "country",
        "city",
        "timeZone"
      ]
    },
    "userRole": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string"
        }
      },
      "title": "filter by role in da system"
    },
    "userUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "englishLevel": {
          "type": "string"
        },
        "photo": {
          "$ref": "#/definitions/commonFile"
        },
        "resume": {
          "$ref": "#/definitions/userResume"
        },
        "contact": {
          "$ref": "#/definitions/userContact"
        }
      },
      "description": "The basic message containing the primary information about a user.",
      "title": "User json schema",
      "required": [
        "lastName",
        "firstName",
        "email",
        "language",
        "englishLevel",
        "photo",
        "country",
        "city",
        "timeZone",
        "resume",
        "contact"
      ]
    },
    "userUsers": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userUser"
          }
        }
      },
      "title": "Users json schema",
      "required": [
        "users"
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header",
      "x-amazon-apigateway-authorizer": {
        "authorizerResultTtlInSeconds": 60,
        "type": "token"
      },
      "x-amazon-apigateway-authtype": "oauth2"
    },
    "BasicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "ApiKeyAuth": [],
      "BasicAuth": []
    }
  ]
}
